datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int              @id @default(autoincrement())
  createdAt    DateTime         @default(now())
  email        String           @unique
  username     String           @unique
  role         Role             @default(USER)
  gigs         Gig[]
  accounts     Account[]
  RefreshToken RefreshToken[]
  ResetToken   ResetToken?
  applications GigApplication[]
}

model Account {
  id                Int     @id @default(autoincrement())
  provider          String
  providerAccountId String
  passwordHash      String?
  accessToken       String?
  refreshToken      String?
  userId            Int
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Gig {
  id             Int              @id @default(autoincrement())
  imgKey         String
  title          String
  price          Float
  description    String
  published      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  authorId       Int
  author         User             @relation(fields: [authorId], references: [id])
  GigApplication GigApplication[]
}

model GigApplication {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  status    Status   @default(PENDING)
  gig       Gig      @relation(fields: [gigId], references: [id])
  gigId     Int
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}
