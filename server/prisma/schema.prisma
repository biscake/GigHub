datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  email            String            @unique
  username         String            @unique
  role             Role              @default(USER)
  gigs             Gig[]
  accounts         Account[]
  ResetToken       ResetToken[]
  applications     GigApplication[]
  profile          UserProfile?
  userProfileId    Int?
  givenReviews     Review[]          @relation("UserGivenReviews")
  receivedReviews  Review[]          @relation("UserReceivedReviews")
  applicationStats ApplicationStats?
  sentMessage      ChatMessage[]     @relation("sentMessage")
  devices          Device[]
}

model Account {
  id                Int     @id @default(autoincrement())
  provider          String
  providerAccountId String
  passwordHash      String?
  accessToken       String?
  refreshToken      String?
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserProfile {
  id                    Int     @id @default(autoincrement())
  numberOfGigsPosted    Int     @default(0)
  numberOfGigsCompleted Int     @default(0)
  averageRating         Float?
  bio                   String?
  profilePictureKey     String  @default("default/Default_pfp.svg")
  userId                Int     @unique
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id         Int      @id @default(autoincrement())
  comment    String
  rating     Int
  createdAt  DateTime @default(now())
  reviewerId Int?
  revieweeId Int?
  reviewer   User?    @relation("UserGivenReviews", fields: [reviewerId], references: [id], onDelete: SetNull)
  reviewee   User?    @relation("UserReceivedReviews", fields: [revieweeId], references: [id], onDelete: SetNull)
}

model Gig {
  id             Int              @id @default(autoincrement())
  imgKey         String
  title          String
  price          Decimal          @db.Decimal(10, 2)
  description    String
  category       String?
  published      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  authorId       Int
  author         User             @relation(fields: [authorId], references: [id])
  GigApplication GigApplication[]
  conversation   Conversation[]
}

model GigApplication {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  status    Status   @default(PENDING)
  gig       Gig      @relation(fields: [gigId], references: [id], onDelete: Cascade)
  gigId     Int
  message   String?
}

model ApplicationStats {
  id       Int  @id @default(autoincrement())
  sent     Int  @default(0)
  received Int  @default(0)
  userId   Int  @unique
  user     User @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  deviceId  Int
  device    Device   @relation(fields: [deviceId], references: [id])

  @@unique([deviceId, token])
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model IdempotencyKey {
  id           String   @id
  responseBody Json?
  createdAt    DateTime @default(now())
}

model ChatMessage {
  id              String              @id @default(uuid())
  sender          User                @relation("sentMessage", fields: [senderId], references: [id])
  senderId        Int
  sentAt          DateTime            @default(now())
  devices         ChatMessageDevice[]
  conversationKey String
  conversation    Conversation        @relation(fields: [conversationKey], references: [conversationKey], onDelete: Cascade)
}

model ChatMessageDevice {
  id                String      @id @default(uuid())
  messageId         String
  message           ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  recipientDeviceId Int
  recipientDevice   Device      @relation("recipientMessage", fields: [recipientDeviceId], references: [id])
  senderDeviceId    Int
  senderDevice      Device      @relation("senderMessage", fields: [senderDeviceId], references: [id])
  ciphertext        String
}

model Conversation {
  id              String         @id @default(uuid())
  conversationKey String         @unique @default(uuid())
  participants    Participant[]
  messages        ChatMessage[]
  createdAt       DateTime       @default(now())
  lastReads       ChatLastRead[]
  gigId           Int
  gig             Gig            @relation(fields: [gigId], references: [id], onDelete: Cascade)
}

model Participant {
  id             String       @id @default(uuid())
  userId         Int
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model ChatLastRead {
  id              String       @id @default(uuid())
  userId          Int
  lastRead        DateTime
  conversationKey String
  conversation    Conversation @relation(fields: [conversationKey], references: [conversationKey], onDelete: Cascade)

  @@unique([userId, conversationKey])
}

model Device {
  id                  Int                 @id @default(autoincrement())
  deviceId            String
  encryptedPrivateKey String?
  salt                String?
  iv                  String?
  publicKey           String?
  user                User                @relation(fields: [userId], references: [id])
  userId              Int
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  sentMessages        ChatMessageDevice[] @relation("senderMessage")
  receivedMessages    ChatMessageDevice[] @relation("recipientMessage")
  refreshTokens       RefreshToken[]

  @@unique([deviceId, userId])
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}
